@Grab(group='org.codehaus.gpars', module='gpars', version='1.1.0')
import groovyx.gpars.*
import groovyx.gpars.actor.*
import static groovyx.gpars.actor.Actors.*
import java.util.concurrent.atomic.AtomicInteger

include 'LAPPS'
include 'Common'
include 'Gate'
include 'Masc'

gate = GateServices.new(Nodes.localhost, '1.3.1-SNAPSHOT')
masc = MascData.new(Nodes.localhost, '1.4.0')

File opennlpDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/opennlp')
File lingpipeDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/lingpipe')
File annieDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/annie')

class Packet {
	int id
	String key
	File file
	Data data
	boolean getPoison()  {
		return key == null
	}
}

// The writer thread needs to wait for a poison pill from each of the worker threads
// before it is safe for it to shutdown. The killed counter keeps track of how many
//  workers have been killed.
killed = new AtomicInteger()

GParsPool.withPool {
	
	writer = actor { 
		loop {
			react { packet ->
				if (packet.poison) {			
					if (killed.incrementAndGet() >= 3) {
						println "Writer shutting down."
						stop()
					}
				}
				else {
					packet.file.text = packet.data.payload
					println "${packet.id}: Wrote ${packet.file.path}"
				} 
			}
		}
	}
	
	annie = actor { 
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Annie ${packet.key}"
					packet.data = gate.annie.execute(packet.data)
					packet.file = new File(annieDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	lingpipe = actor { 
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Lingpipe ${packet.key}"
					packet.data = gate.lingpipe.execute(packet.data)
					packet.file = new File(lingpipeDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	opennlp = actor { 
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: OpenNLP ${packet.key}"
					packet.data = gate.opennlp.execute(packet.data)
					packet.file = new File(opennlpDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	reader = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Fetching ${packet.key}"
					packet.data = masc.text.get(packet.key)
				}
				opennlp << packet
				lingpipe << packet
				annie << packet
			}
		}
	}
	
	// Now feed some data to the actors.
	int id = 0
	String[] keys = masc.text.list()
	keys[0..99].each { key ->
		reader << new Packet(id:++id, key:key)
	}
	// Feed the poison pill to kill the actors.
	reader << new Packet()
	
	// It is safe to exit when the last actor (writer) stops.
	writer.join()
}

println "Done."