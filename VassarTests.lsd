@Grab('org.lappsgrid:vocabulary:0.9.4')
import org.lappsgrid.vocabulary.*
import org.anc.util.StopWatch
import util.LocalAlignmentService
import util.RemoteAlignmentService
import util.OnePerLineWrapperService

//include 'Brandeis'
include 'Vassar'
include 'Common'
include 'Masc'
include 'LAPPS'
include 'Services'

def node = Nodes.vassar
def stanford = VassarServices.getStanfordServices(node, '1.3.2')
def masc = MascData.new(node, '1.4.0')
def convert = Service {
	server node.server
	name "${node.id}:convert.json2gate_0.3.3"
}

String[] keys = masc.text.list()
int start = 0
int end = keys.size()

if (args.start) start = args.start as int
if (args.end) end = args.end as int

def path = args.out ?: '/Users/suderman/Projects/LAPPS/output/vassar'
File destination = createDir(path)

int count = 0
keys[start..end-1].each { key ->
	++count
	println "${count}. Processing ${key}"
	Data data = masc.text.get(key)
	check(data, Types.TEXT)
	data = stanford.splitter.execute(data)
	check(data, Types.JSON)
	data = convert.execute(data)
	//Container container = new Container(data.payload)
	File file = new File(destination, "${key}.xml")
	write(file, data.payload)	
	println "Wrote ${file.path}"
}
