import MascIndex

include 'LAPPS'
include 'Masc'
include 'Common'
include 'Converters'
include 'Gate'
include 'Stanford'
include 'OpenNLP'

def masc = MascData.new(Nodes.vassar, '1.4.2')

convert = null
provider = null
String outpath = null


if (args.gate) {
	provider = GateServices.new(Nodes.vassar, "1.3.5")
	convert = ConverterServices.new(Nodes.vassar, "0.4.0")
	outpath = '/Users/suderman/Desktop/Gate'
}
else if (args.stanford) {
	provider = StanfordServices.new(Nodes.vassar, '1.4.0')
	outpath = '/Users/suderman/Desktop/Stanford'
}
else if (args.opennlp) {
	provider = OpenNLPServices.new()
	outpath = '/Users/suderman/Desktop/OpenNLP'
}
else {
	println "Unknown service type."
	return
}

File outdir = new File(outpath)
if (!outdir.exists()) {
	if (!outdir.mkdirs()) {
		println "Unable to create ${outpath}"
		return
	}
}

def services = []
if (args.gate) {
	services << provider.tokenizer
	services << provider.gazetteer
	services << provider.splitter
	services << provider.tagger
	services << provider.ner
	services << convert.gate2json
}
else {
	services << provider.tokenizer
	services << provider.splitter
	services << provider.tagger
	services << provider.ner
}

def timer = new org.anc.util.StopWatch()
def index = new MascIndex()
index.load("MascIndex.tsv")
int count = 0
def failed = []
def keys = masc.text.list()
keys.each { key ->
	try {
		Data data = masc.text.get(key)
		print "${++count}\t${key}\t${index.getWordCount(key)}"
		timer.start()
		services.each { service ->
			//println "Calling ${service.endpoint}"
			data = service.execute(data)
			check(data)
		}
		timer.stop()
		def container = new Container(data.payload)
		File outfile = new File(outdir, "${key}.json")
		outfile.text = container.toPrettyJson()	
		println "\t${timer.toString()}"
	}
	catch (Throwable t) {
		String message = "${key} ${t.message}"
		println "\t${timer.toString()}\t${t.message}"
		failed << message
	}
}

if (failed.size() > 0) {
	println "The following files had errors"
	failed.each { println it }
}

println "Done."

