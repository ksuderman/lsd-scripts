@Grab(group='org.codehaus.gpars', module='gpars', version='1.1.0')
import groovyx.gpars.*
import groovyx.gpars.actor.*
import static groovyx.gpars.actor.Actors.*
import java.util.concurrent.atomic.AtomicInteger

/*
 * This script uses the Actor Model and the GPars Actors.* classes to manage a pool of worker threads that
 * process MASC in parallel using the three GATE pipelines: annie, opennlp, and lingpipe.
 */
include 'LAPPS'
include 'Common'
include 'Masc'
include 'Vassar'

version = '1.3.2-SNAPSHOT'
def node = Nodes.getNode()

def getClient(String name) {
    return new ServiceClient("http://localhost:8080/GateServices${version}/services/${name}", null, null)
}

annieClient = getClient('Annie')
lingpipeClient = getClient('LingPipe')
opennlpClient = getClient('OpenNlp')

//masc = MascData.new(Nodes.localhost, '1.4.0')
masc = new DataSourceClient("http://localhost:8080/MascDataSource/1.4.0/services/MascTextSource", null, null)

File opennlpDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/opennlp')
File lingpipeDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/lingpipe')
File annieDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/annie')

class Packet {
	int id
	String key
	File file
	Data data
	boolean getPoison()  {
		return key == null
	}
}

// The writer thread needs to wait for a poison pill from each of the worker threads
// before it is safe for it to shutdown. The killed counter keeps track of how many
//  workers have been killed.
killed = new AtomicInteger()

GParsPool.withPool(5) {

	writer = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					if (killed >= 3) {
						println "Writer shutting down."
						stop()
					}
				}
				else {
					packet.file.text = packet.data.payload
					println "${packet.id}: Wrote ${packet.file.path}"
				}
			}
		}
	}

	annie = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Annie ${packet.key}"
					packet.data = annieClient.execute(packet.data)
					packet.file = new File(annieDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	lingpipe = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Lingpipe ${packet.key}"
					packet.data = lingpipeClient.execute(packet.data)
					packet.file = new File(lingpipeDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	opennlp = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: OpenNLP ${packet.key}"
					packet.data = opennlpClient.execute(packet.data)
					packet.file = new File(opennlpDest, "${packet.key}.xml")
				}
				writer << packet
			}
		}
	}

	reader = actor {
		loop {
			react { packet ->
				if (packet.poison) {
					stop()
				}
				else {
					println "${packet.id}: Fetching ${packet.key}"
					packet.data = masc.get(packet.key)
				}
				opennlp << packet
				lingpipe << packet
				annie << packet
			}
		}
	}

	// Now feed some data to the actors.
	int id = 0
	String[] keys = masc.list()
	keys.each { key ->
		reader << new Packet(id:++id, key:key)
	}
	// Feed the poison pill to kill the actors.
	reader << new Packet()

	// It is safe to exit when the last actor (writer) in the network stops.
	writer.join()
}

println "Done."