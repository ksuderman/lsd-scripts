import org.anc.util.StopWatch

/*
 * This script uses the Actor Model and the GPars Actors.* classes to manage a pool of worker threads that
 * process MASC in parallel using the three GATE pipelines: annie, opennlp, and lingpipe.
 */
//include 'LAPPS'
include 'Common'
include 'Tomcat'

version = '1.3.2-SNAPSHOT'
//def node = Nodes.getNode()
gate = getGateServices('http://localhost:8080', version)
converter = getConverters('http://localhost:8080', '0.3.1-SNAPSHOT')

def getClient(String name) {
    //return new ServiceClient("http://localhost:8080/GateServices${version}/services/${name}", null, null)
    return gate[name]
}

annie = lingpipe = opennlp = null

int procs = 0
if (args.size() == 0) {
    annie = getClient('annie')
    lingpipe = getClient('lingpipe')
    opennlp = getClient('OpenNlp')
    procs = 3
}
if (args.annie) {
    annie = getClient('annie')
    ++procs
}
if (args.lingpipe) {
    lingpipe = getClient('lingpipe')
    ++procs
}
if (args.opennlp) {
    opennlp = getClient('opennlp')
    ++procs
}

if (procs == 0) {
    println "No processors specified."
    return
}

//masc = MascData.new(Nodes.localhost, '1.4.0')
masc = new DataSourceClient("http://localhost:8080/MascDataSource/1.4.0/services/MascTextSource", null, null)

File opennlpDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/opennlp')
File lingpipeDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/lingpipe')
File annieDest = createDir('/Users/suderman/Projects/LAPPS/stresstest/annie')

int count = 0
List threads = []
StopWatch timer = new StopWatch()
String[] keys = masc.list()

int start = 0
int end = keys.size()
if (args.start) {
    start = args.start as int
}
if (args.end) {
    end = args.end as int
    if (end > keys.size()) {
        end = keys.size()
    }
}

lock = new Object()
convert = { data ->
    synchronized(lock) {
        return converter.gate2json.execute(data)
    }
}

timer.start()
keys[start..end-1].each { key ->
    if (key.startsWith('OANC')) {
        println "${count}. Skipping ${key}"
    }
    else {
        println "${++count}. Processing ${key}"
        Data data = masc.get(key)
        if (annie) {
            threads << Thread.start {
                println "Running Annie"
                Data result = annie.execute(data)
                result = convert(result)
                File file = new File(annieDest, "${key}.xml")
                file.text = result.payload
                println "Wrote ${file.path}"
            }
        }
        if (opennlp) {
            threads << Thread.start {
                println "Running OpenNLP"
                Data result = opennlp.execute(data)
                result = convert(result)
                File file = new File(opennlpDest, "${key}.xml")
                file.text = result.payload
                println "Wrote ${file.path}"
            }
        }
        if (lingpipe) {
            threads << Thread.start {
                println "Running Lingpipe"
                Data result = lingpipe.execute(data)
                result = convert(result)
                File file = new File(lingpipeDest, "${key}.xml")
                file.text = result.payload
                println "Wrote ${file.path}"
            }
        }
        println "Waiting on ${key}."
        threads*.join()
        threads.clear()
    }
}
timer.stop()
println "Time ${timer}"
