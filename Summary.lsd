/*
 * Summarizes the annotations in a directory of files.
 */
if (!args.path) {
	println "No directory specified."
//	return
}

ext = 'json'
['txt', 'xml', 'csv', 'json'].each {
	if (args[it]) {
		ext = it
	}
}

path = args.path ?: '/Users/suderman/Projects/LAPPS/output/stanford'

summarizer = new Summarizer()

include 'Servers'
convert = Service {
	server servers.localhost
	name 'picard:convert.gate2json_0.3.0'
}

void scan(File directory) {
	println "Scanning ${directory.path}"
	directory.eachFileMatch(~/.*\.${ext}$/) { file ->
		process(file)
	}
}

void process(File file) {
	println "Processing ${file.path}"
	Container container
	if (file.name.endsWith(".xml")) {
		Data data = new Data(Types.GATE, file.text)
		data = convert.execute(data)
		container = new Container(data.payload)
	}
	else {
		container = new Container(file.text)
	}
	summarizer.summarize(container)
}

File directory = new File(path)
if (!directory.exists()) {
	println "Directory not found."
	return
}

if (directory.isDirectory()) {
	directory.eachDirRecurse { dir->
		scan(dir)
	}	
	scan(directory)
}
else {
	process(directory)
}
println()
summarizer.print()

return

class Summarizer {
	def annotations = [:]
	def providers = new HashSet()
	void summarize(Container container) {
		container.steps.each { ProcessingStep step ->
			def provider = step.metadata.producedBy
			if (provider) {
				provider.split(", ").each { 				
					providers << it
				}
			}
			step.annotations.each { a ->
				AnnotationInfo info = annotations[a.label]
				if (info == null) {
					info = new AnnotationInfo(label:a.label)
					annotations[a.label] = info
				}
				info.increment()
				a.features.each { name,value ->
					info.addFeature(name)
				}
			}
		}
	}
	
	void print() {
		println "Annotation Providers:"
		providers.each { println it }
		println()
		
		println "Annotations"
		annotations.each { name,info ->
			info.print()
		}
		println()
	}
}

class AnnotationInfo {
	String label
	int count = 0
	Map features = [:]
	
	void increment() {
		++count
	}
	
	void addFeature(String name) {
		Counter count = features[name]
		if (count == null) {
			count = new Counter()
			features[name] = count
		}
		count.increment()
	}
	
	void print() {
		println "${label} : ${count}"
		features.each { name, count ->
			println "\t${name} : ${count}"
		}
	}
}
