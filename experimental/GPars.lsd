import util.DataSourceIterator
import util.ServiceProvider
@Grab(group='org.codehaus.gpars', module='gpars', version='1.1.0')
import groovyx.gpars.*
import groovyx.gpars.dataflow.*

include 'Servers'
include 'Common'

def datasource = Datasource {
	server servers.localhost
	name 'picard:masc.text_1.3.0'
}

String[] keys = datasource.list()

// These are the common services between the two providers we want to invoke.
def services = [ 'tokenizer', 'splitter', 'tagger', 'ner' ]

// Get the service clients.
def gate = new ServiceProvider(servers.vassar, 'gate', '1.3.1', services)
def stanford = new ServiceProvider(servers.vassar, 'stanford', '1.3.0', services)

// Create directories for the output.
File gateDest = createDir('/Users/suderman/Projects/LAPPS/output/gate')
File stanfordDest = createDir('/Users/suderman/Projects/LAPPS/output/stanford')


GParsPool.withPool {
	// Create an asynchronous function so we can easily spin up threads to do the
	// actual work.
	def process = { service, input, destination ->
		Data result = service.run(input)
		destination.text = result.payload
		return "Wrote ${destination}"
	}.asyncFun()

	keys.each { key ->
		def document = datasource.get(key)
		String filename = "${key}.xml"
		
		// Start the asynchronous functions.
		def gateResult = process(gate, document, new File(gateDest, filename))
		def stanfordResult = process(stanford, document, new File(stanfordDest, filename))
	
		// Block until both threads finish.
		println gateResult.get()
		println stanfordResult.get()
	} 
}
println "Done."